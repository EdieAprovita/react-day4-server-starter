{"version":3,"sources":["components/projects/AddProject.js","components/projects/ProjectList.js","components/auth/auth-service.js","components/navbar/Navbar.js","components/projects/EditProject.js","components/tasks/AddTask.js","components/projects/ProjectDetails.js","components/auth/SignUp.js","components/auth/LogIn.js","components/auth/protected-route.js","App.js","serviceWorker.js","index.js"],"names":["AddProject","props","useState","title","description","formState","updateFormState","handleChange","event","target","name","value","Object","assign","onSubmit","preventDefault","axios","post","process","withCredentials","then","getData","catch","error","console","log","type","onChange","e","ProjectList","listOfProjects","updateList","getAllProjects","get","responseFromApi","data","useEffect","style","width","float","map","project","key","_id","to","tasks","task","index","AuthService","signup","username","password","service","response","loggedin","login","logout","create","baseURL","this","navbar","userInSession","getUser","className","textDecoration","onClick","EditProject","history","useHistory","theProject","put","getTheProject","push","AddTask","isShowing","toggleIsShowing","handleFormSubmit","body","projectID","showAddTaskForm","ProjectDetails","id","useParams","getSingleProject","updateProject","err","renderAddTaskForm","loggedInUser","owner","length","renderEditForm","delete","ownershipCheck","SignUp","LogIn","protectedRoute","Component","component","user","rest","render","pathname","state","from","location","App","theUser","getTheUser","Navbar","path","exact","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e5baa36d.chunk.js","sourcesContent":["// components/projects/AddProject.js\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\nconst AddProject = props => {\n\n    const [ formState, updateFormState ] = useState({\n        title: '',\n        description: ''\n    });\n\n    const handleFormSubmit = (event) => {\n        event.preventDefault();\n        \n        axios.post(`${process.env.REACT_APP_API_URL}/projects`, formState, {withCredentials:true})\n        .then( () => {\n            props.getData();\n            updateFormState({title: \"\", description: \"\"})\n        })\n        .catch( error => console.log(error) )\n    }\n\n    const handleChange = (event) => {  \n        const { name, value } = event.target;\n        updateFormState(Object.assign({}, formState, {[name]: value}))\n    }\n\n\n    return(\n        <div>\n            <form onSubmit={handleFormSubmit}>\n                <label>Title:</label>\n                <input type=\"text\" name=\"title\" value={formState.title} onChange={ e => handleChange(e)}/>\n                <label>Description:</label>\n                <textarea name=\"description\" value={formState.description} onChange={ e => handleChange(e)} />\n                \n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n        </div>\n        )\n}\n\nexport default AddProject;","// components/projects/ProjectList.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\nimport AddProject from './AddProject'; // <== !!!\n\nconst ProjectList = props => {\n\n  const [ listOfProjects, updateList ] = useState([])\n\n  const getAllProjects = () =>{\n    axios.get(`${process.env.REACT_APP_API_URL}/projects`, {withCredentials:true})\n    .then(responseFromApi => {\n      updateList(responseFromApi.data)\n    })\n  }\n\n  useEffect(()=>{\n    getAllProjects();\n  }, [])\n\n\n  return(\n    <div>\n      <div style={{width: '60%', float:\"left\"}}>\n        { listOfProjects.map( project => {\n          return (\n            <div key={project._id}>\n              <Link to={`/projects/${project._id}`}>\n                <h3>{project.title}</h3>\n              </Link>\n              {/*  added so the tasks can be displayed:   */}\n              <ul>\n                { project.tasks.map((task, index) => {\n                  return <li key={index}>{task.title}</li>\n                }) }\n              </ul>  \n              {/* <p style={{maxWidth: '400px'}} >{project.description} </p> */}\n            </div>\n          )})\n        }\n      </div>\n      <div style={{width: '40%', float:\"right\"}}>\n          <AddProject getData={() => getAllProjects()}/> {/* <== !!! */}\n      </div>\n    </div>\n  )\n}\n\nexport default ProjectList;","// auth/auth-service.js\n\nimport axios from 'axios';\n\nclass AuthService {\n  constructor() {\n    let service = axios.create({\n      baseURL: process.env.REACT_APP_API_URL,\n      withCredentials: true\n    });\n    this.service = service;\n  }\n\n  signup = (username, password) => {\n    return this.service.post('/signup', {username, password})\n    .then(response => response.data)\n  }\n\n  loggedin = () => {\n    return this.service.get('/loggedin')\n    .then(response => response.data)\n  }\n\n  login = (username, password) => {\n    return this.service.post('/login', {username, password})\n    .then(response => response.data)\n  }\n  \n  logout = () => {\n    return this.service.post('/logout', {})\n    .then(response => response.data)\n  }\n\n}\n\nexport default AuthService;","// components/navbar/Navbar.js\n\nimport React, {useState} from 'react';\nimport { Link } from 'react-router-dom';\nimport AuthService from '../auth/auth-service';\n\nconst navbar = ({userInSession, getUser}) => {\n    const service = new AuthService();\n\n    const logoutUser = () =>{\n        service.logout()\n        .then(() => {\n          getUser(null);  \n        })\n    }\n    \n    if (userInSession){\n        return(\n            <nav className=\"nav-style\">\n            <ul>\n              <li>Welcome, {userInSession.username}</li>\n              <li><Link to='/projects' style={{ textDecoration: 'none' }}>Projects</Link></li>\n              <li>\n                <Link to='/'>\n                  <button onClick={() => logoutUser()}>Logout</button>\n                </Link>\n              </li>\n            </ul>\n          </nav>\n        )\n      } else {\n        return (\n          <div>\n          <nav className=\"nav-style\">\n            <ul>\n              <li><Link to='/signup' style={{ textDecoration: 'none' }}>Signup</Link></li>\n            </ul>\n          </nav>\n          </div>\n        )\n      }\n}\n\nexport default navbar;","// components/projects/EditProject.js\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\n\nconst EditProject = props => {\n\nconst history = useHistory();\n  const [ formState, updateFormState ] = useState({\n      title: props.theProject.title,\n      description: props.theProject.description\n  })\n\n  const handleFormSubmit = (event) => {\n\n    event.preventDefault();\n\n    axios.put(`${process.env.REACT_APP_API_URL}/projects/${props.theProject._id}`, formState, {withCredentials:true})\n    .then( () => {\n        props.getTheProject();\n        // after submitting the form, redirect to '/projects'\n        history.push('/projects');    \n    })\n    .catch( error => console.log(error) )\n  }\n\n  const handleChange = (event) => {  \n    const { name, value } = event.target;\n    updateFormState(Object.assign({}, formState, {[name]: value}))\n  }\n\n    return (\n      <div>\n        <hr />\n        <h3>Edit form</h3>\n        <form onSubmit={handleFormSubmit}>\n          <label>Title:</label>\n          <input type=\"text\" name=\"title\" value={formState.title} onChange={e => handleChange(e)}/>\n          <label>Description:</label>\n          <textarea name=\"description\" value={formState.description} onChange={e => handleChange(e)} />\n          \n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    )\n}\n\nexport default EditProject;","// components/tasks/AddTask.js\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\nconst AddTask = props => {\n \n  const [ formState, updateFormState] = useState ({\n      title:\"\",\n      description: \"\"\n  })\n  \n  const [ isShowing,toggleIsShowing ] = useState (false) \n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    const body =Object.assign({projectID:props.theProject._id}, formState)\n   \n    axios.post(`${process.env.REACT_APP_API_URL}/tasks`, body)\n    .then( () => {\n          // after submitting the form, retrieve project one more time so the new task is displayed as well \n          //              |\n        props.getTheProject();\n        updateFormState({title: \"\", description: \"\"})\n    })\n    .catch( error => console.log(error) )\n  }\n\n  const handleChange = (event) => {  \n    const { name, value } = event.target;\n    updateFormState(Object.assign({}, formState, {[name]: value}))\n  }\n\n  const toggleForm = () => {\n      toggleIsShowing(!isShowing)\n  }\n\n  const showAddTaskForm = () => {\n    if(isShowing){\n        return(\n            <div>\n                  <h3>Add Task</h3>\n                  <form onSubmit={handleFormSubmit}>\n                  <label>Title:</label>\n                  <input type=\"text\" name=\"title\" value={formState.title} onChange={ e => handleChange(e)}/>\n                  <label>Description:</label>\n                  <textarea name=\"description\" value={formState.description} onChange={ e => handleChange(e)} />\n                  \n                  <input type=\"submit\" value=\"Submit\" />\n                  </form>\n            </div>\n          )\n    }\n  }\n\n    return(\n      <div>\n            <hr />\n            <button onClick={() => toggleForm()}> Add task </button>\n            { showAddTaskForm() }\n      </div>\n    )\n  }\n\n\nexport default AddTask;","// components/projects/ProjectDetails.js\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Link, useParams, useHistory } from 'react-router-dom';\nimport EditProject from './EditProject';\nimport AddTask from '../tasks/AddTask';\n\nconst ProjectDetails = (props) => {\n\n\n  const history = useHistory();\n  const { id } = useParams();\n\n  useEffect(()=>{\n      getSingleProject()\n  }, []);\n\n  const [ theProject, updateProject ] = useState({\n      _id: '',\n      title: '',\n      description: '',\n      tasks: []\n  });\n\n  const getSingleProject = () => {\n      axios.get(`${process.env.REACT_APP_API_URL}/projects/${id}`, {withCredentials:true})\n      .then( responseFromApi =>{\n          updateProject(responseFromApi.data)\n      })\n      .catch((err)=>{\n          console.log(err)\n      })\n  }\n  const renderEditForm = () => {\n    if(!theProject.title){\n      getSingleProject();\n    } else {                                                                                  \n      return (<EditProject theProject={theProject} getTheProject={getSingleProject} {...props} />)\n    }\n  }\n\n  const deleteProject = () => {\n    axios.delete(`${process.env.REACT_APP_API_URL}/projects/${id}`, {withCredentials:true})\n    .then( () =>{\n        history.push('/projects'); // !!!         \n    })\n    .catch((err)=>{\n        console.log(err)\n    })\n  }\n\n\n  const ownershipCheck = (project) => {\n      console.log(project)\n      console.log(props.loggedInUser)\n    if(props.loggedInUser && project.owner == props.loggedInUser._id) {\n      return (\n        <div>\n            {/* show the task heading only if there are tasks */}\n            { theProject.tasks && theProject.tasks.length > 0 && <h3>Tasks </h3> }\n            {/* map through the array of tasks and... */}\n            { theProject.tasks && theProject.tasks.map((task, index) => {\n                return(\n                    <div key={ index }>\n                    {/* ... make each task's title a link that goes to the task details page */}\n                        <Link to={`/projects/${theProject._id}/tasks/${task._id}`}> \n                            { task.title }\n                        </Link>\n                    </div>\n                )\n                \n            }) }\n          <div>{renderEditForm()} </div>\n          <button onClick={() => deleteProject(theProject._id)}>Delete project</button>\n            <br/>\n            <div>{renderAddTaskForm()} </div>\n        </div>\n      )\n    }\n  }\n  const renderAddTaskForm = () => {\n    if(!theProject.title){\n        getSingleProject();\n      } else {\n        return <AddTask theProject={theProject} getTheProject={getSingleProject} />\n      }\n  }\n\n  return(\n    <div>\n      <h1>{theProject.title}</h1>\n      <p>{theProject.description}</p>\n      <div >\n        {ownershipCheck(theProject)}\n      </div>\n      <Link to={'/projects'}>Back to projects</Link>\n    </div>\n  )\n}\n\nexport default ProjectDetails;","// auth/Signup.js\n\nimport React, { useState } from 'react';\nimport AuthService from './auth-service';\nimport { Link } from 'react-router-dom';\n\nconst SignUp = props => {\n\n  const [ formState, updateFormState ] = useState({ username: '', password: '' })\n  const service = new AuthService();\n  // handleChange() and handleSubmit() will be added here\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    const username = formState.username;\n    const password = formState.password;\n  \n    service.signup(username, password)\n    .then( response => {\n        updateFormState({\n            username: \"\", \n            password: \"\",\n        });\n        props.getUser(response)\n    })\n    .catch( error => console.log(error) )\n  }\n  \n  const handleChange = (event) => {  \n    const {name, value} = event.target;\n    updateFormState(Object.assign({}, formState, {[name]: value}));\n  }\n\n  return(\n    <div>\n      <form onSubmit={handleFormSubmit}>\n        <label>Username:</label>\n        <input type=\"text\" name=\"username\" value={formState.username} onChange={ e => handleChange(e)}/>\n        \n        <label>Password:</label>\n        <input name=\"password\" type=\"password\" value={formState.password} onChange={ e => handleChange(e)} />\n        \n        <input type=\"submit\" value=\"Signup\" />\n      </form>\n\n      <p>Already have account? \n          <Link to={\"/\"}> Login</Link>\n      </p>\n\n    </div>\n  )\n}\n\nexport default SignUp;","// auth/Login.js\n\nimport React, { useState } from 'react';\nimport AuthService from './auth-service';\nimport { Link } from 'react-router-dom';\n\nconst LogIn = props => {\n  const [ formState, updateFormState ] = useState (\n    { username: '', password: '' }\n  )\n  const service = new AuthService()\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    const username = formState.username;\n    const password = formState.password;\n    service.login(username, password)\n    .then( response => {\n        updateFormState({ username: \"\", password: \"\" });\n        props.getUser(response)\n    })\n    .catch( error => console.log(error) )\n  }\n    \n  const handleChange = (event) => {  \n    const {name, value} = event.target;\n    updateFormState(Object.assign({}, formState, {[name]: value}));\n  }\n    \n  \n    return(\n      <div>\n        <form onSubmit={handleFormSubmit}>\n          <label>Username:</label>\n          <input type=\"text\" name=\"username\" value={formState.username} onChange={ e => handleChange(e)}/>\n          <label>Password:</label>\n          <input type=\"password\" name=\"password\" value={formState.password} onChange={ e => handleChange(e)} />\n          \n          <input type=\"submit\" value=\"Login\" />\n        </form>\n        <p>Don't have account? \n            <Link to={\"/signup\"}> Signup</Link>\n        </p>\n      </div>\n    )\n  \n}\n\n\nexport default LogIn;","// auth/protected-route.js\n\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nconst protectedRoute  = ({component: Component, user, ...rest}) => {\n  console.log({component: Component, user, ...rest})\n    return (\n      <Route\n        {...rest}\n        render={ props  => {\n            if(user){\n              return <Component {...props} loggedInUser={user}/>\n            } else {\n              return <Redirect to={{pathname: '/', state: {from: props.location}}} />\n            }\n          }\n        }\n      />\n    )\n}\nexport default protectedRoute;","// App.js\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\n\nimport ProjectList from './components/projects/ProjectList';\nimport Navbar from './components/navbar/Navbar';\nimport ProjectDetails from './components/projects/ProjectDetails';\nimport TaskDetails from './components/tasks/TaskDetails';\nimport SignUp from './components/auth/SignUp';\nimport AuthService from './components/auth/auth-service';\nimport LogIn from './components/auth/LogIn';\nimport ProtectedRoute from './components/auth/protected-route';\n\nconst App = props => {\n\n    const [ theUser, getTheUser ] = useState(null);\n    const service = new AuthService();\n  \n    const fetchUser = () => {\n      if( theUser === null ){\n        service.loggedin()\n        .then(response =>{\n          getTheUser(response)\n        })\n        .catch( err =>{\n          getTheUser(null)\n        })\n      }\n    }\n\n    fetchUser()\n  \n    if(theUser){\n      return (\n        <div className=\"App\">\n          <Navbar userInSession={theUser} getUser={getTheUser}/>\n          <Switch>\n            <ProtectedRoute user={theUser} path='/projects/:id' component={ProjectDetails} />\n            <ProtectedRoute user={theUser} path='/projects' component={ProjectList} />\n          </Switch>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          <Navbar userInSession={theUser} />\n          <Switch>\n            <Route exact path='/signup' render={() => <SignUp getUser={getTheUser}/>}/>\n            <Route exact path='/' render={() => <LogIn getUser={getTheUser}/>}/>\n            <ProtectedRoute user={theUser} path='/projects/:id' component={ProjectDetails} />\n            <ProtectedRoute user={theUser} path='/projects' component={ProjectList} />\n          </Switch>\n        </div>\n      );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { unregister} from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom'; // <== !!!\n\nReactDOM.render((\n<Router> \n    <App />\n</Router> \n), document.getElementById('root'));\nunregister();"],"sourceRoot":""}